// Generated by CoffeeScript 1.10.0

/**
 * server-checker : lib/checkers/http
 * Author: MrKMG (https://github.com/mrkmg)
 * Contributor: Sven Slootweg (joepie91) (http://cryto.net/~joepie91/)
 *
 * MIT License
 */

(function() {
  var Promise, _, checkResponse, http_node, https_node, makeRequest, run, runRequest;

  Promise = require('bluebird');

  http_node = require('http');

  https_node = require('https');

  _ = require('underscore');

  run = function(options, ssl) {
    return Promise["try"](function() {
      return makeRequest(options, ssl);
    }).then(function(request) {
      return runRequest(options, request).then(checkResponse)["catch"](_.identity);
    });
  };

  makeRequest = function(options, ssl) {
    var handler;
    _.defaults(options, {
      host: 'localhost',
      port: ssl ? 443 : 80,
      method: 'GET',
      path: '/',
      strictSSL: false,
      rejectUnauthorized: true,
      ca: null,
      timeout: 5000,
      agent: false
    });
    handler = ssl ? https_node : http_node;
    return handler.request(_.pick(options, 'host', 'port', 'method', 'path', 'strictSSL', 'rejectUnauthorized', 'ca'));
  };

  runRequest = function(options, request) {
    return new Promise(function(resolve, reject) {
      var cancelEvent, cleanupRequest, doTimeout, request_timeout;
      cancelEvent = function(event_name) {
        request.removeAllListeners(event_name);
        return request.on(event_name, _.noop);
      };
      cleanupRequest = function() {
        clearTimeout(request_timeout);
        cancelEvent('response');
        cancelEvent('error');
        return request.destroy();
      };
      doTimeout = function() {
        var err;
        cleanupRequest();
        err = new Error('Request exceeded timeout of ' + options.timeout + 'ms');
        err.code = 'TIMEOUT';
        return reject(err);
      };
      request.on('response', function(response) {
        cleanupRequest();
        return resolve(response);
      });
      request.on('error', function(err) {
        cleanupRequest();
        return reject(err);
      });
      request_timeout = setTimeout(doTimeout, options.timeout);
      return request.end();
    });
  };

  checkResponse = function(response) {
    var error;
    if (response.statusCode >= 400) {
      error = new Error('HTTP Status code in error range: ' + response.statusCode);
      error.code = 'HTTPSTATUSCODE';
      throw error;
    }
    return null;
  };

  module.exports = {
    http: function(options) {
      return run(options, false);
    },
    https: function(options) {
      return run(options, true);
    }
  };

}).call(this);
