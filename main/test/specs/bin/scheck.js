// Generated by CoffeeScript 1.10.0

/*
 * server-checker : test/specs/bin/scheck
 * Author: MrKMG (https://github.com/mrkmg)
 *
 * MIT License
 */

(function() {
  var assert, chai, chalk, scheck, server_200, sinon;

  chai = require('chai');

  chai.use(require('chai-as-promised'));

  sinon = require('sinon');

  chalk = require('chalk');

  assert = chai.assert;

  server_200 = require('../../fixtures/http/server-200')();

  scheck = require('../../../bin/scheck');

  describe('BIN: scheck', function() {
    before(function(done) {
      sinon.stub(process, 'exit');
      sinon.spy(console, 'log');
      chalk.enabled = false;
      return server_200.start(10000, done);
    });
    beforeEach(function() {
      return console.log.reset();
    });
    after(function(done) {
      process.exit.restore();
      console.log.restore();
      chalk.enabled = true;
      return server_200.stop(done);
    });
    it('should output help correctly', function() {
      var args, promise;
      args = ['path/to/node', 'path/to/scheck', '--no-color', '-h'];
      promise = scheck(args).then(function() {
        return [].concat.apply([], console.log.args).join(' ');
      });
      return assert.eventually.equal(promise, 'Usage:     scheck [method] host [additional_options]  Methods     http, https, smtp, smtpTls, ping, rawTcp, dns');
    });
    it('should process one argument correctly', function() {
      var args, promise;
      args = ['path/to/node', 'path/to/scheck', '127.0.0.1', '--port 10000'];
      promise = scheck(args).then(function() {
        return console.log.getCall(0).args[0];
      });
      return assert.eventually.equal(promise, 'Checking 127.0.0.1 via ping');
    });
    it('should process two arguments correctly', function() {
      var args, promise;
      args = ['path/to/node', 'path/to/scheck', 'http', '127.0.0.1'];
      promise = scheck(args).then(function() {
        return console.log.getCall(0).args[0];
      });
      return assert.eventually.equal(promise, 'Checking 127.0.0.1 via http');
    });
    it('should error on no arguments', function() {
      var args, promise;
      args = ['path/to/node', 'path/to/scheck'];
      promise = scheck(args).then(function() {
        return console.log.getCall(0).args[0];
      });
      return assert.eventually.equal(promise, 'Error: Missing host');
    });
    it('should error on too many arguments', function() {
      var args, promise;
      args = ['path/to/node', 'path/to/scheck', 'ping', 'host1', 'host2'];
      promise = scheck(args).then(function() {
        return console.log.getCall(0).args[0];
      });
      return assert.eventually.equal(promise, 'Error: Too many parameters');
    });
    it('should error on unknown type', function() {
      var args, promise;
      args = ['path/to/node', 'path/to/scheck', 'invalid', '127.0.0.1'];
      promise = scheck(args).then(function() {
        return console.log.getCall(0).args[0];
      });
      return assert.eventually.equal(promise, 'Error: invalid is not a valid method');
    });
    return it('should error after proper amount of time', function() {
      var args, promise;
      args = ['path/to/node', 'path/to/scheck', 'ping', '169.254.0.0', '--timeout', '1000'];
      promise = scheck(args).then(function() {
        return parseInt(console.log.getCall(2).args[0].match(/([\d]+)/)[1]);
      });
      return assert.eventually.closeTo(promise, 1000, 100);
    });
  });

}).call(this);
