// Generated by CoffeeScript 1.10.0

/*
 * server-checker : test/specs/plugins/http
 * Author: MrKMG (https://github.com/mrkmg)
 *
 * MIT License
 */

(function() {
  var ServiceChecker, assert, async, chai;

  chai = require('chai');

  chai.use(require('chai-as-promised'));

  async = require('async');

  ServiceChecker = require('../../..')({
    timeout: 1000
  });

  assert = chai.assert;

  describe('PLUGIN: http', function() {
    var server_200, server_404, server_timeout;
    server_200 = require('../../fixtures/http/server-200')();
    server_404 = require('../../fixtures/http/server-404')();
    server_timeout = require('../../fixtures/http/server-timeout')();
    before('starting up test servers', function(done) {
      return async.parallel([
        function(callback) {
          return server_200.start(10000, callback);
        }, function(callback) {
          return server_404.start(10001, callback);
        }, function(callback) {
          return server_timeout.start(10002, callback);
        }
      ], done);
    });
    after('closing test servers', function(done) {
      return async.parallel([
        function(callback) {
          return server_200.stop(callback);
        }, function(callback) {
          return server_404.stop(callback);
        }, function(callback) {
          return server_timeout.stop(callback);
        }
      ], done);
    });
    it('should have method', function() {
      return assert.property(ServiceChecker, 'http');
    });
    it('should return success:true for properly responding server', function() {
      var options;
      options = {
        port: 10000
      };
      return assert.eventually.include(ServiceChecker.http(options), {
        success: true
      });
    });
    it('should return success:false for 404 error', function() {
      var options;
      options = {
        port: 10001
      };
      return assert.eventually.include(ServiceChecker.http(options), {
        success: false
      });
    });
    it('should return success:false for slow responding server (timeout)', function() {
      var options;
      options = {
        port: 10002
      };
      return assert.eventually.include(ServiceChecker.http(options), {
        success: false
      });
    });
    return it('should reject if bad parameter passed', function() {
      var options;
      options = {
        host: true
      };
      return assert.isRejected(ServiceChecker.http(options));
    });
  });

}).call(this);
