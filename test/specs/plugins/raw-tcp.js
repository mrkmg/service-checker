// Generated by CoffeeScript 1.10.0

/**
 * server-checker : test/specs/plugins/raw-tcp
 * Author: MrKMG (https://github.com/mrkmg)
 *
 * MIT License
 */

(function() {
  var assert, async, chai, serviceChecker;

  chai = require('chai');

  chai.use(require('chai-as-promised'));

  assert = chai.assert;

  async = require('async');

  serviceChecker = require('../../..')({
    timeout: 1000
  });

  describe('PLUGIN: raw-tcp', function() {
    var server_open;
    server_open = require('../../fixtures/raw-tcp/server-open')();
    before('starting up test servers', function(done) {
      return async.parallel([
        function(callback) {
          return server_open.start(10000, callback);
        }
      ], done);
    });
    after('closing test servers', function(done) {
      return async.parallel([
        function(callback) {
          return server_open.stop(callback);
        }
      ], done);
    });
    it('should have method', function() {
      return assert.property(serviceChecker, 'rawTcp');
    });
    it('should return success:true for valid server', function() {
      var options;
      options = {
        port: 10000
      };
      return assert.eventually.include(serviceChecker.rawTcp(options), {
        success: true
      });
    });
    it('should return success:false for bad server', function() {
      var options;
      options = {
        port: 10001
      };
      return assert.eventually.include(serviceChecker.rawTcp(options), {
        success: false
      });
    });
    describe('disable net connect', function() {
      var disable_net_connect_event;
      disable_net_connect_event = require('../../fixtures/raw-tcp/disable-net-connect-event')();
      before('disable net connect event', function(done) {
        return disable_net_connect_event.start(done);
      });
      after('restore net connect event', function(done) {
        return disable_net_connect_event.stop(done);
      });
      return it('should return success:true on connect event timeout', function() {
        var options;
        options = {
          port: 10000
        };
        return assert.eventually.include(serviceChecker.rawTcp(options), {
          success: false
        });
      });
    });
    it('should return success:false for invalid Domain', function() {
      var options;
      options = {
        host: 'invalid.domain',
        port: 10000
      };
      return assert.eventually.include(serviceChecker.rawTcp(options), {
        success: false
      });
    });
    return it('should reject for no port', function() {
      var options;
      options = {};
      return assert.isRejected(serviceChecker.rawTcp(options));
    });
  });

}).call(this);
