// Generated by CoffeeScript 1.10.0

/**
 * server-checker : lib/checkers/smtp
 * Author: MrKMG (https://github.com/mrkmg)
 * Contributor: Sven Slootweg (joepie91) (http://cryto.net/~joepie91/)
 *
 * MIT License
 */

(function() {
  var Promise, _, makeRequest, run, runRequest, smtpConnection;

  Promise = require('bluebird');

  smtpConnection = require('smtp-connection');

  _ = require('underscore');

  run = function(options, tls) {
    return Promise["try"](function() {
      return makeRequest(options, tls);
    }).then(function(request) {
      return runRequest(options, request)["catch"](_.identity);
    });
  };

  makeRequest = function(options, tls) {
    _.defaults(options, {
      host: 'localhost',
      port: 25,
      ca: null,
      timeout: 5000
    });
    if (!(_.isString(options.host) || !options.host)) {
      throw new Error('Hostname must be a string or falsey');
    }
    if (!(_.isNumber(options.port) || !options.port)) {
      throw new Error('Port but be a number or falsey');
    }
    if (tls) {
      options.requireTLS = true;
      options.ignoreTLS = false;
      options.tls = {
        ca: options.ca
      };
    } else {
      options.requireTLS = false;
      options.ignoreTLS = true;
    }
    return new smtpConnection(_.pick(options, ['host', 'port', 'tls', 'requireTLS', 'ignoreTLS']));
  };

  runRequest = function(options, request) {
    return new Promise(function(resolve, reject) {
      var cancelEvent, cleanupRequest, doTimeout, request_timeout;
      cancelEvent = function(event_name) {
        request.removeAllListeners(event_name);
        return request.on(event_name, _.noop);
      };
      cleanupRequest = function() {
        clearTimeout(request_timeout);
        cancelEvent('data');
        cancelEvent('error');
        return request.close();
      };
      doTimeout = function() {
        var err;
        cleanupRequest();
        err = new Error('Request exceeded timeout of ' + options.timeout + 'ms');
        err.code = 'TIMEOUT';
        return reject(err);
      };
      request.on('connect', function() {
        cleanupRequest();
        return resolve();
      });
      request.on('error', function(err) {
        cleanupRequest();
        return reject(err);
      });
      request_timeout = setInterval(doTimeout, options.timeout);
      return request.connect();
    });
  };

  module.exports = {
    smtp: function(options) {
      return run(options, false);
    },
    smtpTls: function(options) {
      return run(options, true);
    }
  };

}).call(this);
